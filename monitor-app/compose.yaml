services:
  server:
    build:
      context: .
      dockerfile: Dockerfile
      target: dev
    command: yarn run dev
    environment:
      NODE_ENV: production
    ports:
      - 3000:3000
    develop:
      watch:
        - action: sync
          path: .
          target: /usr/src/app
          ignore:
            - node_modules/
        - action: rebuild
          path: ./package.json
  cache_service:
    command:
      - 'redis-cli SET SecondBranchSaturatedSolutionTemp 90'
      - 'redis-cli SET ThirdBranchSaturatedSolutionTemp 104'
      - 'redis-cli SET DeeplyRegeneratedSolution 70'
      - 'redis-cli SET VaporGasMixtureTemperature 80'
      - 'redis-cli SET VaporGasMixturePressure 0.17'
      - 'redis-cli SET ConvertedGasPressure 2.8'
      - 'redis-cli SET ConvertedGasTemperature 30'
      - 'redis-cli save'
    container_name: cache_service
    image: redis:latest
    ports:
      - "6379:6379"
    networks:
      - internalnet

networks:
  internalnet:
    driver: bridge
# The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker-compose up`.
#     depends_on:
#       db:
#         condition: service_healthy
#   db:
#     image: postgres
#     restart: always
#     user: postgres
#     secrets:
#       - db-password
#     volumes:
#       - db-data:/var/lib/postgresql/data
#     environment:
#       - POSTGRES_DB=example
#       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
#     expose:
#       - 5432
#     healthcheck:
#       test: [ "CMD", "pg_isready" ]
#       interval: 10s
#       timeout: 5s
#       retries: 5
# volumes:
#   db-data:
# secrets:
#   db-password:
#     file: db/password.txt

